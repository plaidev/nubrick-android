/**
 * This file is generated by nativebrik/pkg/kotlin_code_gen. Do not edit this file.
 */
package com.nativebrik.sdk.schema

import android.os.Build
import java.time.ZonedDateTime
import kotlinx.serialization.json.JsonPrimitive
import kotlinx.serialization.json.JsonElement
import kotlinx.serialization.json.JsonNull
import kotlinx.serialization.json.JsonArray
import kotlinx.serialization.json.JsonObject
import kotlinx.serialization.json.jsonPrimitive
import kotlinx.serialization.json.jsonObject
import kotlinx.serialization.json.jsonArray


internal typealias ID = String
internal typealias DateTime = ZonedDateTime

internal class StringDecoder {
	companion object {
		fun decode(element: JsonElement?): String? {
			if (element == null) {
				return null
			}
			if (element !is JsonPrimitive) {
				return null
			}
			if (element is JsonNull) {
				return null
			}
			if (!element.jsonPrimitive.isString) {
				return null
			}
			return element.jsonPrimitive.content
		}
	}
}

internal class IntDecoder {
	companion object {
		fun decode(element: JsonElement?): Int? {
			if (element == null) {
				return null
			}
			if (element !is JsonPrimitive) {
				return null
			}
			if (element is JsonNull) {
				return null
			}
			if (element.jsonPrimitive.isString) {
				return null
			}
			return try {
				return element.jsonPrimitive.content.toInt()
			} catch (e: Exception) {
				return null
			}
		}
	}
}

internal class FloatDecoder {
	companion object {
		fun decode(element: JsonElement?): Float? {
			if (element == null) {
				return null
			}
			if (element !is JsonPrimitive) {
				return null
			}
			if (element is JsonNull) {
				return null
			}
			if (element.jsonPrimitive.isString) {
				return null
			}
			return try {
				return element.jsonPrimitive.content.toFloat()
			} catch (e: Exception) {
				return null
			}
		}
	}
}

internal class BooleanDecoder {
	companion object {
		fun decode(element: JsonElement?): Boolean? {
			if (element == null) {
				return null
			}
			if (element !is JsonPrimitive) {
				return null
			}
			if (element is JsonNull) {
				return null
			}
			if (element.jsonPrimitive.isString) {
				return null
			}
			return try {
				return element.jsonPrimitive.content.toBoolean()
			} catch (e: Exception) {
				return null
			}
		}
	}
}

internal class ListDecoder {
	companion object {
		fun <T> decode(element: JsonElement?, decoder: (element: JsonElement?) -> T?): List<T>? {
			if (element == null) {
				return null
			}
			if (element is JsonNull) {
				return null
			}
			if (element !is JsonArray) {
				return null
			}
			val list = mutableListOf<T>()
			val iterator = element.jsonArray.iterator()
			while (iterator.hasNext()) {
				val item = iterator.next()
				val decoded = decoder(item) ?: continue
				list.add(decoded)
			}
			return list
		}
	}
}

internal class DateTimeDecoder {
	companion object {
		fun decode(element: JsonElement?): ZonedDateTime? {
			if (element == null) {
				return null
			}
			if (element !is JsonPrimitive) {
				return null
			}
			if (element is JsonNull) {
				return null
			}
			if (!element.jsonPrimitive.isString) {
				return null
			}
			return try {
				ZonedDateTime.parse(element.jsonPrimitive.content)
			} catch (e: Exception) {
				return null
			}
		}
	}
}


internal enum class AlignItems {
	START,
	CENTER,
	END,
	UNKNOWN,;

	companion object {
		fun decode(element: JsonElement?): AlignItems? {
			if (element == null) {
				return null
			}
			if (element !is JsonPrimitive) {
				return null
			}
			if (element is JsonNull) {
				return null
			}
			if (!element.jsonPrimitive.isString) {
				return null
			}
			return when (element.jsonPrimitive.content) {
				"START" -> START
				"CENTER" -> CENTER
				"END" -> END
				else -> UNKNOWN
			}
		}
	}
}


internal class ApiHttpHeader (
	val name: String? = null,
	val value: String? = null,
) {
	companion object {
		fun decode(element: JsonElement?): ApiHttpHeader? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return ApiHttpHeader(
				name = StringDecoder.decode(element.jsonObject["name"]),
				value = StringDecoder.decode(element.jsonObject["value"]),
			)
		}
	}
}

internal class ApiHttpRequest (
	val url: String? = null,
	val method: ApiHttpRequestMethod? = null,
	val headers: List<ApiHttpHeader>? = null,
	val body: String? = null,
) {
	companion object {
		fun decode(element: JsonElement?): ApiHttpRequest? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return ApiHttpRequest(
				url = StringDecoder.decode(element.jsonObject["url"]),
				method = ApiHttpRequestMethod.decode(element.jsonObject["method"]),
				headers = ListDecoder.decode(element.jsonObject["headers"]) { element: JsonElement? ->
				ApiHttpHeader.decode(element)
			},
				body = StringDecoder.decode(element.jsonObject["body"]),
			)
		}
	}
}

internal enum class ApiHttpRequestMethod {
	GET,
	POST,
	PUT,
	DELETE,
	PATCH,
	HEAD,
	TRACE,
	UNKNOWN,;

	companion object {
		fun decode(element: JsonElement?): ApiHttpRequestMethod? {
			if (element == null) {
				return null
			}
			if (element !is JsonPrimitive) {
				return null
			}
			if (element is JsonNull) {
				return null
			}
			if (!element.jsonPrimitive.isString) {
				return null
			}
			return when (element.jsonPrimitive.content) {
				"GET" -> GET
				"POST" -> POST
				"PUT" -> PUT
				"DELETE" -> DELETE
				"PATCH" -> PATCH
				"HEAD" -> HEAD
				"TRACE" -> TRACE
				else -> UNKNOWN
			}
		}
	}
}


internal class ApiHttpResponseAssertion (
	val statusCodes: List<Int>? = null,
) {
	companion object {
		fun decode(element: JsonElement?): ApiHttpResponseAssertion? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return ApiHttpResponseAssertion(
				statusCodes = ListDecoder.decode(element.jsonObject["statusCodes"]) { element: JsonElement? ->
				IntDecoder.decode(element)
			},
			)
		}
	}
}

internal class BoxShadow (
	val color: Color? = null,
	val offsetX: Int? = null,
	val offsetY: Int? = null,
	val radius: Int? = null,
) {
	companion object {
		fun decode(element: JsonElement?): BoxShadow? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return BoxShadow(
				color = Color.decode(element.jsonObject["color"]),
				offsetX = IntDecoder.decode(element.jsonObject["offsetX"]),
				offsetY = IntDecoder.decode(element.jsonObject["offsetY"]),
				radius = IntDecoder.decode(element.jsonObject["radius"]),
			)
		}
	}
}

internal enum class BuiltinUserProperty {
	userId,
	userRnd,
	languageCode,
	regionCode,
	currentTime,
	firstBootTime,
	lastBootTime,
	retentionPeriod,
	bootingTime,
	sdkVersion,
	osVersion,
	osName,
	appVersion,
	cfBundleVersion,
	localYear,
	localMonth,
	localWeekday,
	localDay,
	localHour,
	localMinute,
	localSecond,
	UNKNOWN,;

	companion object {
		fun decode(element: JsonElement?): BuiltinUserProperty? {
			if (element == null) {
				return null
			}
			if (element !is JsonPrimitive) {
				return null
			}
			if (element is JsonNull) {
				return null
			}
			if (!element.jsonPrimitive.isString) {
				return null
			}
			return when (element.jsonPrimitive.content) {
				"userId" -> userId
				"userRnd" -> userRnd
				"languageCode" -> languageCode
				"regionCode" -> regionCode
				"currentTime" -> currentTime
				"firstBootTime" -> firstBootTime
				"lastBootTime" -> lastBootTime
				"retentionPeriod" -> retentionPeriod
				"bootingTime" -> bootingTime
				"sdkVersion" -> sdkVersion
				"osVersion" -> osVersion
				"osName" -> osName
				"appVersion" -> appVersion
				"cfBundleVersion" -> cfBundleVersion
				"localYear" -> localYear
				"localMonth" -> localMonth
				"localWeekday" -> localWeekday
				"localDay" -> localDay
				"localHour" -> localHour
				"localMinute" -> localMinute
				"localSecond" -> localSecond
				else -> UNKNOWN
			}
		}
	}
}


internal enum class CollectionKind {
	CAROUSEL,
	SCROLL,
	GRID,
	UNKNOWN,;

	companion object {
		fun decode(element: JsonElement?): CollectionKind? {
			if (element == null) {
				return null
			}
			if (element !is JsonPrimitive) {
				return null
			}
			if (element is JsonNull) {
				return null
			}
			if (!element.jsonPrimitive.isString) {
				return null
			}
			return when (element.jsonPrimitive.content) {
				"CAROUSEL" -> CAROUSEL
				"SCROLL" -> SCROLL
				"GRID" -> GRID
				else -> UNKNOWN
			}
		}
	}
}


internal class Color (
	val red: Float? = null,
	val green: Float? = null,
	val blue: Float? = null,
	val alpha: Float? = null,
) {
	companion object {
		fun decode(element: JsonElement?): Color? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return Color(
				red = FloatDecoder.decode(element.jsonObject["red"]),
				green = FloatDecoder.decode(element.jsonObject["green"]),
				blue = FloatDecoder.decode(element.jsonObject["blue"]),
				alpha = FloatDecoder.decode(element.jsonObject["alpha"]),
			)
		}
	}
}

internal enum class ConditionOperator {
	Regex,
	Equal,
	NotEqual,
	GreaterThan,
	GreaterThanOrEqual,
	LessThan,
	LessThanOrEqual,
	In,
	NotIn,
	Between,
	UNKNOWN,;

	companion object {
		fun decode(element: JsonElement?): ConditionOperator? {
			if (element == null) {
				return null
			}
			if (element !is JsonPrimitive) {
				return null
			}
			if (element is JsonNull) {
				return null
			}
			if (!element.jsonPrimitive.isString) {
				return null
			}
			return when (element.jsonPrimitive.content) {
				"Regex" -> Regex
				"Equal" -> Equal
				"NotEqual" -> NotEqual
				"GreaterThan" -> GreaterThan
				"GreaterThanOrEqual" -> GreaterThanOrEqual
				"LessThan" -> LessThan
				"LessThanOrEqual" -> LessThanOrEqual
				"In" -> In
				"NotIn" -> NotIn
				"Between" -> Between
				else -> UNKNOWN
			}
		}
	}
}


internal class ExperimentCondition (
	val property: String? = null,
	val operator: String? = null,
	val value: String? = null,
) {
	companion object {
		fun decode(element: JsonElement?): ExperimentCondition? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return ExperimentCondition(
				property = StringDecoder.decode(element.jsonObject["property"]),
				operator = StringDecoder.decode(element.jsonObject["operator"]),
				value = StringDecoder.decode(element.jsonObject["value"]),
			)
		}
	}
}

internal class ExperimentConfig (
	val id: ID? = null,
	val kind: ExperimentKind? = null,
	val distribution: List<ExperimentCondition>? = null,
	val baseline: ExperimentVariant? = null,
	val variants: List<ExperimentVariant>? = null,
	val seed: Int? = null,
	val frequency: ExperimentFrequency? = null,
	val startedAt: DateTime? = null,
	val endedAt: DateTime? = null,
) {
	companion object {
		fun decode(element: JsonElement?): ExperimentConfig? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return ExperimentConfig(
				id = StringDecoder.decode(element.jsonObject["id"]),
				kind = ExperimentKind.decode(element.jsonObject["kind"]),
				distribution = ListDecoder.decode(element.jsonObject["distribution"]) { element: JsonElement? ->
				ExperimentCondition.decode(element)
			},
				baseline = ExperimentVariant.decode(element.jsonObject["baseline"]),
				variants = ListDecoder.decode(element.jsonObject["variants"]) { element: JsonElement? ->
				ExperimentVariant.decode(element)
			},
				seed = IntDecoder.decode(element.jsonObject["seed"]),
				frequency = ExperimentFrequency.decode(element.jsonObject["frequency"]),
				startedAt = DateTimeDecoder.decode(element.jsonObject["startedAt"]),
				endedAt = DateTimeDecoder.decode(element.jsonObject["endedAt"]),
			)
		}
	}
}

internal class ExperimentConfigs (
	val configs: List<ExperimentConfig>? = null,
) {
	companion object {
		fun decode(element: JsonElement?): ExperimentConfigs? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return ExperimentConfigs(
				configs = ListDecoder.decode(element.jsonObject["configs"]) { element: JsonElement? ->
				ExperimentConfig.decode(element)
			},
			)
		}
	}
}

internal class ExperimentFrequency (
	val period: Int? = null,
	val unit: FrequencyUnit? = null,
) {
	companion object {
		fun decode(element: JsonElement?): ExperimentFrequency? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return ExperimentFrequency(
				period = IntDecoder.decode(element.jsonObject["period"]),
				unit = FrequencyUnit.decode(element.jsonObject["unit"]),
			)
		}
	}
}

internal enum class ExperimentKind {
	EMBED,
	POPUP,
	CONFIG,
	UNKNOWN,;

	companion object {
		fun decode(element: JsonElement?): ExperimentKind? {
			if (element == null) {
				return null
			}
			if (element !is JsonPrimitive) {
				return null
			}
			if (element is JsonNull) {
				return null
			}
			if (!element.jsonPrimitive.isString) {
				return null
			}
			return when (element.jsonPrimitive.content) {
				"EMBED" -> EMBED
				"POPUP" -> POPUP
				"CONFIG" -> CONFIG
				else -> UNKNOWN
			}
		}
	}
}


internal class ExperimentVariant (
	val id: ID? = null,
	val configs: List<VariantConfig>? = null,
	val weight: Int? = null,
) {
	companion object {
		fun decode(element: JsonElement?): ExperimentVariant? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return ExperimentVariant(
				id = StringDecoder.decode(element.jsonObject["id"]),
				configs = ListDecoder.decode(element.jsonObject["configs"]) { element: JsonElement? ->
				VariantConfig.decode(element)
			},
				weight = IntDecoder.decode(element.jsonObject["weight"]),
			)
		}
	}
}

internal enum class FlexDirection {
	ROW,
	COLUMN,
	UNKNOWN,;

	companion object {
		fun decode(element: JsonElement?): FlexDirection? {
			if (element == null) {
				return null
			}
			if (element !is JsonPrimitive) {
				return null
			}
			if (element is JsonNull) {
				return null
			}
			if (!element.jsonPrimitive.isString) {
				return null
			}
			return when (element.jsonPrimitive.content) {
				"ROW" -> ROW
				"COLUMN" -> COLUMN
				else -> UNKNOWN
			}
		}
	}
}


internal enum class FontDesign {
	DEFAULT,
	MONOSPACE,
	ROUNDED,
	SERIF,
	UNKNOWN,;

	companion object {
		fun decode(element: JsonElement?): FontDesign? {
			if (element == null) {
				return null
			}
			if (element !is JsonPrimitive) {
				return null
			}
			if (element is JsonNull) {
				return null
			}
			if (!element.jsonPrimitive.isString) {
				return null
			}
			return when (element.jsonPrimitive.content) {
				"DEFAULT" -> DEFAULT
				"MONOSPACE" -> MONOSPACE
				"ROUNDED" -> ROUNDED
				"SERIF" -> SERIF
				else -> UNKNOWN
			}
		}
	}
}


internal enum class FontWeight {
	ULTRA_LIGHT,
	THIN,
	LIGHT,
	REGULAR,
	MEDIUM,
	SEMI_BOLD,
	BOLD,
	HEAVY,
	BLACK,
	UNKNOWN,;

	companion object {
		fun decode(element: JsonElement?): FontWeight? {
			if (element == null) {
				return null
			}
			if (element !is JsonPrimitive) {
				return null
			}
			if (element is JsonNull) {
				return null
			}
			if (!element.jsonPrimitive.isString) {
				return null
			}
			return when (element.jsonPrimitive.content) {
				"ULTRA_LIGHT" -> ULTRA_LIGHT
				"THIN" -> THIN
				"LIGHT" -> LIGHT
				"REGULAR" -> REGULAR
				"MEDIUM" -> MEDIUM
				"SEMI_BOLD" -> SEMI_BOLD
				"BOLD" -> BOLD
				"HEAVY" -> HEAVY
				"BLACK" -> BLACK
				else -> UNKNOWN
			}
		}
	}
}


internal class FrameData (
	val width: Int? = null,
	val height: Int? = null,
	val paddingLeft: Int? = null,
	val paddingRight: Int? = null,
	val paddingTop: Int? = null,
	val paddingBottom: Int? = null,
	val borderRadius: Int? = null,
	val borderWidth: Int? = null,
	val borderColor: Color? = null,
	val background: Color? = null,
	val backgroundSrc: String? = null,
	val shadow: BoxShadow? = null,
) {
	companion object {
		fun decode(element: JsonElement?): FrameData? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return FrameData(
				width = IntDecoder.decode(element.jsonObject["width"]),
				height = IntDecoder.decode(element.jsonObject["height"]),
				paddingLeft = IntDecoder.decode(element.jsonObject["paddingLeft"]),
				paddingRight = IntDecoder.decode(element.jsonObject["paddingRight"]),
				paddingTop = IntDecoder.decode(element.jsonObject["paddingTop"]),
				paddingBottom = IntDecoder.decode(element.jsonObject["paddingBottom"]),
				borderRadius = IntDecoder.decode(element.jsonObject["borderRadius"]),
				borderWidth = IntDecoder.decode(element.jsonObject["borderWidth"]),
				borderColor = Color.decode(element.jsonObject["borderColor"]),
				background = Color.decode(element.jsonObject["background"]),
				backgroundSrc = StringDecoder.decode(element.jsonObject["backgroundSrc"]),
				shadow = BoxShadow.decode(element.jsonObject["shadow"]),
			)
		}
	}
}

internal enum class FrequencyUnit {
	DAY,
	UNKNOWN,;

	companion object {
		fun decode(element: JsonElement?): FrequencyUnit? {
			if (element == null) {
				return null
			}
			if (element !is JsonPrimitive) {
				return null
			}
			if (element is JsonNull) {
				return null
			}
			if (!element.jsonPrimitive.isString) {
				return null
			}
			return when (element.jsonPrimitive.content) {
				"DAY" -> DAY
				else -> UNKNOWN
			}
		}
	}
}


internal enum class ImageContentMode {
	FIT,
	FILL,
	UNKNOWN,;

	companion object {
		fun decode(element: JsonElement?): ImageContentMode? {
			if (element == null) {
				return null
			}
			if (element !is JsonPrimitive) {
				return null
			}
			if (element is JsonNull) {
				return null
			}
			if (!element.jsonPrimitive.isString) {
				return null
			}
			return when (element.jsonPrimitive.content) {
				"FIT" -> FIT
				"FILL" -> FILL
				else -> UNKNOWN
			}
		}
	}
}


internal enum class JustifyContent {
	START,
	CENTER,
	END,
	SPACE_BETWEEN,
	UNKNOWN,;

	companion object {
		fun decode(element: JsonElement?): JustifyContent? {
			if (element == null) {
				return null
			}
			if (element !is JsonPrimitive) {
				return null
			}
			if (element is JsonNull) {
				return null
			}
			if (!element.jsonPrimitive.isString) {
				return null
			}
			return when (element.jsonPrimitive.content) {
				"START" -> START
				"CENTER" -> CENTER
				"END" -> END
				"SPACE_BETWEEN" -> SPACE_BETWEEN
				else -> UNKNOWN
			}
		}
	}
}


internal enum class ModalPresentationStyle {
	DEPENDS_ON_CONTEXT_OR_FULL_SCREEN,
	DEPENDS_ON_CONTEXT_OR_PAGE_SHEET,
	UNKNOWN,;

	companion object {
		fun decode(element: JsonElement?): ModalPresentationStyle? {
			if (element == null) {
				return null
			}
			if (element !is JsonPrimitive) {
				return null
			}
			if (element is JsonNull) {
				return null
			}
			if (!element.jsonPrimitive.isString) {
				return null
			}
			return when (element.jsonPrimitive.content) {
				"DEPENDS_ON_CONTEXT_OR_FULL_SCREEN" -> DEPENDS_ON_CONTEXT_OR_FULL_SCREEN
				"DEPENDS_ON_CONTEXT_OR_PAGE_SHEET" -> DEPENDS_ON_CONTEXT_OR_PAGE_SHEET
				else -> UNKNOWN
			}
		}
	}
}


internal enum class ModalScreenSize {
	MEDIUM,
	LARGE,
	MEDIUM_AND_LARGE,
	UNKNOWN,;

	companion object {
		fun decode(element: JsonElement?): ModalScreenSize? {
			if (element == null) {
				return null
			}
			if (element !is JsonPrimitive) {
				return null
			}
			if (element is JsonNull) {
				return null
			}
			if (!element.jsonPrimitive.isString) {
				return null
			}
			return when (element.jsonPrimitive.content) {
				"MEDIUM" -> MEDIUM
				"LARGE" -> LARGE
				"MEDIUM_AND_LARGE" -> MEDIUM_AND_LARGE
				else -> UNKNOWN
			}
		}
	}
}


internal class NavigationBackButton (
	val title: String? = null,
	val color: Color? = null,
	val visible: Boolean? = null,
) {
	companion object {
		fun decode(element: JsonElement?): NavigationBackButton? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return NavigationBackButton(
				title = StringDecoder.decode(element.jsonObject["title"]),
				color = Color.decode(element.jsonObject["color"]),
				visible = BooleanDecoder.decode(element.jsonObject["visible"]),
			)
		}
	}
}

internal enum class Overflow {
	VISIBLE,
	HIDDEN,
	SCROLL,
	UNKNOWN,;

	companion object {
		fun decode(element: JsonElement?): Overflow? {
			if (element == null) {
				return null
			}
			if (element !is JsonPrimitive) {
				return null
			}
			if (element is JsonNull) {
				return null
			}
			if (!element.jsonPrimitive.isString) {
				return null
			}
			return when (element.jsonPrimitive.content) {
				"VISIBLE" -> VISIBLE
				"HIDDEN" -> HIDDEN
				"SCROLL" -> SCROLL
				else -> UNKNOWN
			}
		}
	}
}


internal enum class PageKind {
	COMPONENT,
	MODAL,
	WEBVIEW_MODAL,
	TRIGGER,
	LOAD_BALANCER,
	DISMISSED,
	UNKNOWN,;

	companion object {
		fun decode(element: JsonElement?): PageKind? {
			if (element == null) {
				return null
			}
			if (element !is JsonPrimitive) {
				return null
			}
			if (element is JsonNull) {
				return null
			}
			if (!element.jsonPrimitive.isString) {
				return null
			}
			return when (element.jsonPrimitive.content) {
				"COMPONENT" -> COMPONENT
				"MODAL" -> MODAL
				"WEBVIEW_MODAL" -> WEBVIEW_MODAL
				"TRIGGER" -> TRIGGER
				"LOAD_BALANCER" -> LOAD_BALANCER
				"DISMISSED" -> DISMISSED
				else -> UNKNOWN
			}
		}
	}
}


internal class Property (
	val name: String? = null,
	val value: String? = null,
	val ptype: PropertyType? = null,
) {
	companion object {
		fun decode(element: JsonElement?): Property? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return Property(
				name = StringDecoder.decode(element.jsonObject["name"]),
				value = StringDecoder.decode(element.jsonObject["value"]),
				ptype = PropertyType.decode(element.jsonObject["ptype"]),
			)
		}
	}
}

internal enum class PropertyType {
	INTEGER,
	STRING,
	TIMESTAMPZ,
	UNKNOWN,;

	companion object {
		fun decode(element: JsonElement?): PropertyType? {
			if (element == null) {
				return null
			}
			if (element !is JsonPrimitive) {
				return null
			}
			if (element is JsonNull) {
				return null
			}
			if (!element.jsonPrimitive.isString) {
				return null
			}
			return when (element.jsonPrimitive.content) {
				"INTEGER" -> INTEGER
				"STRING" -> STRING
				"TIMESTAMPZ" -> TIMESTAMPZ
				else -> UNKNOWN
			}
		}
	}
}


internal enum class TextAlign {
	NATURAL,
	LEFT,
	CENTER,
	RIGHT,
	UNKNOWN,;

	companion object {
		fun decode(element: JsonElement?): TextAlign? {
			if (element == null) {
				return null
			}
			if (element !is JsonPrimitive) {
				return null
			}
			if (element is JsonNull) {
				return null
			}
			if (!element.jsonPrimitive.isString) {
				return null
			}
			return when (element.jsonPrimitive.content) {
				"NATURAL" -> NATURAL
				"LEFT" -> LEFT
				"CENTER" -> CENTER
				"RIGHT" -> RIGHT
				else -> UNKNOWN
			}
		}
	}
}


internal class TriggerEventDef (
	val name: String? = null,
) {
	companion object {
		fun decode(element: JsonElement?): TriggerEventDef? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return TriggerEventDef(
				name = StringDecoder.decode(element.jsonObject["name"]),
			)
		}
	}
}

internal enum class TriggerEventNameDefs {
	RETENTION_1,
	RETENTION_2_3,
	RETENTION_4_7,
	RETENTION_8_14,
	RETENTION_15,
	USER_BOOT_APP,
	USER_ENTER_TO_APP,
	USER_ENTER_TO_APP_FIRSTLY,
	USER_ENTER_TO_FOREGROUND,
	UNKNOWN,;

	companion object {
		fun decode(element: JsonElement?): TriggerEventNameDefs? {
			if (element == null) {
				return null
			}
			if (element !is JsonPrimitive) {
				return null
			}
			if (element is JsonNull) {
				return null
			}
			if (!element.jsonPrimitive.isString) {
				return null
			}
			return when (element.jsonPrimitive.content) {
				"RETENTION_1" -> RETENTION_1
				"RETENTION_2_3" -> RETENTION_2_3
				"RETENTION_4_7" -> RETENTION_4_7
				"RETENTION_8_14" -> RETENTION_8_14
				"RETENTION_15" -> RETENTION_15
				"USER_BOOT_APP" -> USER_BOOT_APP
				"USER_ENTER_TO_APP" -> USER_ENTER_TO_APP
				"USER_ENTER_TO_APP_FIRSTLY" -> USER_ENTER_TO_APP_FIRSTLY
				"USER_ENTER_TO_FOREGROUND" -> USER_ENTER_TO_FOREGROUND
				else -> UNKNOWN
			}
		}
	}
}


internal class TriggerSetting (
	val onTrigger: UIBlockEventDispatcher? = null,
	val trigger: TriggerEventDef? = null,
) {
	companion object {
		fun decode(element: JsonElement?): TriggerSetting? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return TriggerSetting(
				onTrigger = UIBlockEventDispatcher.decode(element.jsonObject["onTrigger"]),
				trigger = TriggerEventDef.decode(element.jsonObject["trigger"]),
			)
		}
	}
}

internal sealed class UIBlock {
	class UnionUIRootBlock(var data: UIRootBlock): UIBlock()
	class UnionUIPageBlock(var data: UIPageBlock): UIBlock()
	class UnionUIFlexContainerBlock(var data: UIFlexContainerBlock): UIBlock()
	class UnionUITextBlock(var data: UITextBlock): UIBlock()
	class UnionUIImageBlock(var data: UIImageBlock): UIBlock()
	class UnionUICollectionBlock(var data: UICollectionBlock): UIBlock()
	class UnionUICarouselBlock(var data: UICarouselBlock): UIBlock()
	class UnionUITextInputBlock(var data: UITextInputBlock): UIBlock()
	class UnionUISelectInputBlock(var data: UISelectInputBlock): UIBlock()
	class UnionUIMultiSelectInputBlock(var data: UIMultiSelectInputBlock): UIBlock()
	class UnionUISwitchInputBlock(var data: UISwitchInputBlock): UIBlock()

	companion object {
		fun decode(element: JsonElement?): UIBlock? {
			if (element == null) {
				return null
			}
			if (element is JsonNull) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}
			val typename = element.jsonObject["__typename"] ?: return null
			if (typename !is JsonPrimitive) {
				return null
			}
			if (element is JsonNull) {
				return null
			}

			return when (typename.jsonPrimitive.content) {
				"UIRootBlock" -> UIRootBlock.decode(element)?.let { UnionUIRootBlock(it) }
				"UIPageBlock" -> UIPageBlock.decode(element)?.let { UnionUIPageBlock(it) }
				"UIFlexContainerBlock" -> UIFlexContainerBlock.decode(element)?.let { UnionUIFlexContainerBlock(it) }
				"UITextBlock" -> UITextBlock.decode(element)?.let { UnionUITextBlock(it) }
				"UIImageBlock" -> UIImageBlock.decode(element)?.let { UnionUIImageBlock(it) }
				"UICollectionBlock" -> UICollectionBlock.decode(element)?.let { UnionUICollectionBlock(it) }
				"UICarouselBlock" -> UICarouselBlock.decode(element)?.let { UnionUICarouselBlock(it) }
				"UITextInputBlock" -> UITextInputBlock.decode(element)?.let { UnionUITextInputBlock(it) }
				"UISelectInputBlock" -> UISelectInputBlock.decode(element)?.let { UnionUISelectInputBlock(it) }
				"UIMultiSelectInputBlock" -> UIMultiSelectInputBlock.decode(element)?.let { UnionUIMultiSelectInputBlock(it) }
				"UISwitchInputBlock" -> UISwitchInputBlock.decode(element)?.let { UnionUISwitchInputBlock(it) }
				else -> null
			}
		}
	}
}


internal class UIBlockEventDispatcher (
	val name: String? = null,
	val destinationPageId: String? = null,
	val deepLink: String? = null,
	val payload: List<Property>? = null,
	val httpRequest: ApiHttpRequest? = null,
	val httpResponseAssertion: ApiHttpResponseAssertion? = null,
) {
	companion object {
		fun decode(element: JsonElement?): UIBlockEventDispatcher? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return UIBlockEventDispatcher(
				name = StringDecoder.decode(element.jsonObject["name"]),
				destinationPageId = StringDecoder.decode(element.jsonObject["destinationPageId"]),
				deepLink = StringDecoder.decode(element.jsonObject["deepLink"]),
				payload = ListDecoder.decode(element.jsonObject["payload"]) { element: JsonElement? ->
				Property.decode(element)
			},
				httpRequest = ApiHttpRequest.decode(element.jsonObject["httpRequest"]),
				httpResponseAssertion = ApiHttpResponseAssertion.decode(element.jsonObject["httpResponseAssertion"]),
			)
		}
	}
}

internal class UICarouselBlock (
	val id: ID? = null,
	val data: UICarouselBlockData? = null,
) {
	companion object {
		fun decode(element: JsonElement?): UICarouselBlock? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return UICarouselBlock(
				id = StringDecoder.decode(element.jsonObject["id"]),
				data = UICarouselBlockData.decode(element.jsonObject["data"]),
			)
		}
	}
}

internal class UICarouselBlockData (
	val children: List<UIBlock>? = null,
	val frame: FrameData? = null,
	val gap: Int? = null,
	val onClick: UIBlockEventDispatcher? = null,
) {
	companion object {
		fun decode(element: JsonElement?): UICarouselBlockData? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return UICarouselBlockData(
				children = ListDecoder.decode(element.jsonObject["children"]) { element: JsonElement? ->
				UIBlock.decode(element)
			},
				frame = FrameData.decode(element.jsonObject["frame"]),
				gap = IntDecoder.decode(element.jsonObject["gap"]),
				onClick = UIBlockEventDispatcher.decode(element.jsonObject["onClick"]),
			)
		}
	}
}

internal class UICollectionBlock (
	val id: ID? = null,
	val data: UICollectionBlockData? = null,
) {
	companion object {
		fun decode(element: JsonElement?): UICollectionBlock? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return UICollectionBlock(
				id = StringDecoder.decode(element.jsonObject["id"]),
				data = UICollectionBlockData.decode(element.jsonObject["data"]),
			)
		}
	}
}

internal class UICollectionBlockData (
	val children: List<UIBlock>? = null,
	val frame: FrameData? = null,
	val gap: Int? = null,
	val kind: CollectionKind? = null,
	val direction: FlexDirection? = null,
	val reference: String? = null,
	val gridSize: Int? = null,
	val itemWidth: Int? = null,
	val itemHeight: Int? = null,
	val onClick: UIBlockEventDispatcher? = null,
) {
	companion object {
		fun decode(element: JsonElement?): UICollectionBlockData? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return UICollectionBlockData(
				children = ListDecoder.decode(element.jsonObject["children"]) { element: JsonElement? ->
				UIBlock.decode(element)
			},
				frame = FrameData.decode(element.jsonObject["frame"]),
				gap = IntDecoder.decode(element.jsonObject["gap"]),
				kind = CollectionKind.decode(element.jsonObject["kind"]),
				direction = FlexDirection.decode(element.jsonObject["direction"]),
				reference = StringDecoder.decode(element.jsonObject["reference"]),
				gridSize = IntDecoder.decode(element.jsonObject["gridSize"]),
				itemWidth = IntDecoder.decode(element.jsonObject["itemWidth"]),
				itemHeight = IntDecoder.decode(element.jsonObject["itemHeight"]),
				onClick = UIBlockEventDispatcher.decode(element.jsonObject["onClick"]),
			)
		}
	}
}

internal class UIFlexContainerBlock (
	val id: ID? = null,
	val data: UIFlexContainerBlockData? = null,
) {
	companion object {
		fun decode(element: JsonElement?): UIFlexContainerBlock? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return UIFlexContainerBlock(
				id = StringDecoder.decode(element.jsonObject["id"]),
				data = UIFlexContainerBlockData.decode(element.jsonObject["data"]),
			)
		}
	}
}

internal class UIFlexContainerBlockData (
	val children: List<UIBlock>? = null,
	val direction: FlexDirection? = null,
	val justifyContent: JustifyContent? = null,
	val alignItems: AlignItems? = null,
	val gap: Int? = null,
	val frame: FrameData? = null,
	val overflow: Overflow? = null,
	val onClick: UIBlockEventDispatcher? = null,
) {
	companion object {
		fun decode(element: JsonElement?): UIFlexContainerBlockData? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return UIFlexContainerBlockData(
				children = ListDecoder.decode(element.jsonObject["children"]) { element: JsonElement? ->
				UIBlock.decode(element)
			},
				direction = FlexDirection.decode(element.jsonObject["direction"]),
				justifyContent = JustifyContent.decode(element.jsonObject["justifyContent"]),
				alignItems = AlignItems.decode(element.jsonObject["alignItems"]),
				gap = IntDecoder.decode(element.jsonObject["gap"]),
				frame = FrameData.decode(element.jsonObject["frame"]),
				overflow = Overflow.decode(element.jsonObject["overflow"]),
				onClick = UIBlockEventDispatcher.decode(element.jsonObject["onClick"]),
			)
		}
	}
}

internal class UIImageBlock (
	val id: ID? = null,
	val data: UIImageBlockData? = null,
) {
	companion object {
		fun decode(element: JsonElement?): UIImageBlock? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return UIImageBlock(
				id = StringDecoder.decode(element.jsonObject["id"]),
				data = UIImageBlockData.decode(element.jsonObject["data"]),
			)
		}
	}
}

internal class UIImageBlockData (
	val src: String? = null,
	val contentMode: ImageContentMode? = null,
	val frame: FrameData? = null,
	val onClick: UIBlockEventDispatcher? = null,
) {
	companion object {
		fun decode(element: JsonElement?): UIImageBlockData? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return UIImageBlockData(
				src = StringDecoder.decode(element.jsonObject["src"]),
				contentMode = ImageContentMode.decode(element.jsonObject["contentMode"]),
				frame = FrameData.decode(element.jsonObject["frame"]),
				onClick = UIBlockEventDispatcher.decode(element.jsonObject["onClick"]),
			)
		}
	}
}

internal class UIMultiSelectInputBlock (
	val id: ID? = null,
	val data: UIMultiSelectInputBlockData? = null,
) {
	companion object {
		fun decode(element: JsonElement?): UIMultiSelectInputBlock? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return UIMultiSelectInputBlock(
				id = StringDecoder.decode(element.jsonObject["id"]),
				data = UIMultiSelectInputBlockData.decode(element.jsonObject["data"]),
			)
		}
	}
}

internal class UIMultiSelectInputBlockData (
	val key: String? = null,
	val options: List<UISelectInputOption>? = null,
	val value: List<String>? = null,
	val placeholder: String? = null,
	val size: Int? = null,
	val color: Color? = null,
	val design: FontDesign? = null,
	val weight: FontWeight? = null,
	val textAlign: TextAlign? = null,
	val frame: FrameData? = null,
) {
	companion object {
		fun decode(element: JsonElement?): UIMultiSelectInputBlockData? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return UIMultiSelectInputBlockData(
				key = StringDecoder.decode(element.jsonObject["key"]),
				options = ListDecoder.decode(element.jsonObject["options"]) { element: JsonElement? ->
				UISelectInputOption.decode(element)
			},
				value = ListDecoder.decode(element.jsonObject["value"]) { element: JsonElement? ->
				StringDecoder.decode(element)
			},
				placeholder = StringDecoder.decode(element.jsonObject["placeholder"]),
				size = IntDecoder.decode(element.jsonObject["size"]),
				color = Color.decode(element.jsonObject["color"]),
				design = FontDesign.decode(element.jsonObject["design"]),
				weight = FontWeight.decode(element.jsonObject["weight"]),
				textAlign = TextAlign.decode(element.jsonObject["textAlign"]),
				frame = FrameData.decode(element.jsonObject["frame"]),
			)
		}
	}
}

internal class UIPageBlock (
	val id: ID? = null,
	val data: UIPageBlockData? = null,
) {
	companion object {
		fun decode(element: JsonElement?): UIPageBlock? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return UIPageBlock(
				id = StringDecoder.decode(element.jsonObject["id"]),
				data = UIPageBlockData.decode(element.jsonObject["data"]),
			)
		}
	}
}

internal class UIPageBlockData (
	val kind: PageKind? = null,
	val modalPresentationStyle: ModalPresentationStyle? = null,
	val modalScreenSize: ModalScreenSize? = null,
	val modalNavigationBackButton: NavigationBackButton? = null,
	val webviewUrl: String? = null,
	val triggerSetting: TriggerSetting? = null,
	val renderAs: UIBlock? = null,
	val position: UIPageBlockPosition? = null,
	val httpRequest: ApiHttpRequest? = null,
	val props: List<Property>? = null,
	val query: String? = null,
) {
	companion object {
		fun decode(element: JsonElement?): UIPageBlockData? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return UIPageBlockData(
				kind = PageKind.decode(element.jsonObject["kind"]),
				modalPresentationStyle = ModalPresentationStyle.decode(element.jsonObject["modalPresentationStyle"]),
				modalScreenSize = ModalScreenSize.decode(element.jsonObject["modalScreenSize"]),
				modalNavigationBackButton = NavigationBackButton.decode(element.jsonObject["modalNavigationBackButton"]),
				webviewUrl = StringDecoder.decode(element.jsonObject["webviewUrl"]),
				triggerSetting = TriggerSetting.decode(element.jsonObject["triggerSetting"]),
				renderAs = UIBlock.decode(element.jsonObject["renderAs"]),
				position = UIPageBlockPosition.decode(element.jsonObject["position"]),
				httpRequest = ApiHttpRequest.decode(element.jsonObject["httpRequest"]),
				props = ListDecoder.decode(element.jsonObject["props"]) { element: JsonElement? ->
				Property.decode(element)
			},
				query = StringDecoder.decode(element.jsonObject["query"]),
			)
		}
	}
}

internal class UIPageBlockPosition (
	val x: Int? = null,
	val y: Int? = null,
) {
	companion object {
		fun decode(element: JsonElement?): UIPageBlockPosition? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return UIPageBlockPosition(
				x = IntDecoder.decode(element.jsonObject["x"]),
				y = IntDecoder.decode(element.jsonObject["y"]),
			)
		}
	}
}

internal class UIRootBlock (
	val id: ID? = null,
	val data: UIRootBlockData? = null,
) {
	companion object {
		fun decode(element: JsonElement?): UIRootBlock? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return UIRootBlock(
				id = StringDecoder.decode(element.jsonObject["id"]),
				data = UIRootBlockData.decode(element.jsonObject["data"]),
			)
		}
	}
}

internal class UIRootBlockData (
	val pages: List<UIPageBlock>? = null,
	val currentPageId: ID? = null,
) {
	companion object {
		fun decode(element: JsonElement?): UIRootBlockData? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return UIRootBlockData(
				pages = ListDecoder.decode(element.jsonObject["pages"]) { element: JsonElement? ->
				UIPageBlock.decode(element)
			},
				currentPageId = StringDecoder.decode(element.jsonObject["currentPageId"]),
			)
		}
	}
}

internal class UISelectInputBlock (
	val id: ID? = null,
	val data: UISelectInputBlockData? = null,
) {
	companion object {
		fun decode(element: JsonElement?): UISelectInputBlock? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return UISelectInputBlock(
				id = StringDecoder.decode(element.jsonObject["id"]),
				data = UISelectInputBlockData.decode(element.jsonObject["data"]),
			)
		}
	}
}

internal class UISelectInputBlockData (
	val key: String? = null,
	val options: List<UISelectInputOption>? = null,
	val value: String? = null,
	val size: Int? = null,
	val color: Color? = null,
	val design: FontDesign? = null,
	val weight: FontWeight? = null,
	val textAlign: TextAlign? = null,
	val frame: FrameData? = null,
) {
	companion object {
		fun decode(element: JsonElement?): UISelectInputBlockData? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return UISelectInputBlockData(
				key = StringDecoder.decode(element.jsonObject["key"]),
				options = ListDecoder.decode(element.jsonObject["options"]) { element: JsonElement? ->
				UISelectInputOption.decode(element)
			},
				value = StringDecoder.decode(element.jsonObject["value"]),
				size = IntDecoder.decode(element.jsonObject["size"]),
				color = Color.decode(element.jsonObject["color"]),
				design = FontDesign.decode(element.jsonObject["design"]),
				weight = FontWeight.decode(element.jsonObject["weight"]),
				textAlign = TextAlign.decode(element.jsonObject["textAlign"]),
				frame = FrameData.decode(element.jsonObject["frame"]),
			)
		}
	}
}

internal class UISelectInputOption (
	val value: String? = null,
	val label: String? = null,
) {
	companion object {
		fun decode(element: JsonElement?): UISelectInputOption? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return UISelectInputOption(
				value = StringDecoder.decode(element.jsonObject["value"]),
				label = StringDecoder.decode(element.jsonObject["label"]),
			)
		}
	}
}

internal class UISwitchInputBlock (
	val id: ID? = null,
	val data: UISwitchInputBlockData? = null,
) {
	companion object {
		fun decode(element: JsonElement?): UISwitchInputBlock? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return UISwitchInputBlock(
				id = StringDecoder.decode(element.jsonObject["id"]),
				data = UISwitchInputBlockData.decode(element.jsonObject["data"]),
			)
		}
	}
}

internal class UISwitchInputBlockData (
	val key: String? = null,
	val value: Boolean? = null,
	val checkedColor: Color? = null,
) {
	companion object {
		fun decode(element: JsonElement?): UISwitchInputBlockData? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return UISwitchInputBlockData(
				key = StringDecoder.decode(element.jsonObject["key"]),
				value = BooleanDecoder.decode(element.jsonObject["value"]),
				checkedColor = Color.decode(element.jsonObject["checkedColor"]),
			)
		}
	}
}

internal class UITextBlock (
	val id: ID? = null,
	val data: UITextBlockData? = null,
) {
	companion object {
		fun decode(element: JsonElement?): UITextBlock? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return UITextBlock(
				id = StringDecoder.decode(element.jsonObject["id"]),
				data = UITextBlockData.decode(element.jsonObject["data"]),
			)
		}
	}
}

internal class UITextBlockData (
	val value: String? = null,
	val size: Int? = null,
	val color: Color? = null,
	val design: FontDesign? = null,
	val weight: FontWeight? = null,
	val maxLines: Int? = null,
	val frame: FrameData? = null,
	val onClick: UIBlockEventDispatcher? = null,
) {
	companion object {
		fun decode(element: JsonElement?): UITextBlockData? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return UITextBlockData(
				value = StringDecoder.decode(element.jsonObject["value"]),
				size = IntDecoder.decode(element.jsonObject["size"]),
				color = Color.decode(element.jsonObject["color"]),
				design = FontDesign.decode(element.jsonObject["design"]),
				weight = FontWeight.decode(element.jsonObject["weight"]),
				maxLines = IntDecoder.decode(element.jsonObject["maxLines"]),
				frame = FrameData.decode(element.jsonObject["frame"]),
				onClick = UIBlockEventDispatcher.decode(element.jsonObject["onClick"]),
			)
		}
	}
}

internal class UITextInputBlock (
	val id: ID? = null,
	val data: UITextInputBlockData? = null,
) {
	companion object {
		fun decode(element: JsonElement?): UITextInputBlock? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return UITextInputBlock(
				id = StringDecoder.decode(element.jsonObject["id"]),
				data = UITextInputBlockData.decode(element.jsonObject["data"]),
			)
		}
	}
}

internal class UITextInputBlockData (
	val key: String? = null,
	val value: String? = null,
	val placeholder: String? = null,
	val regex: String? = null,
	val errorMessage: UITooltipMessage? = null,
	val keyboardType: UITextInputKeyboardType? = null,
	val secure: Boolean? = null,
	val autocorrect: Boolean? = null,
	val size: Int? = null,
	val color: Color? = null,
	val design: FontDesign? = null,
	val weight: FontWeight? = null,
	val textAlign: TextAlign? = null,
	val frame: FrameData? = null,
) {
	companion object {
		fun decode(element: JsonElement?): UITextInputBlockData? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return UITextInputBlockData(
				key = StringDecoder.decode(element.jsonObject["key"]),
				value = StringDecoder.decode(element.jsonObject["value"]),
				placeholder = StringDecoder.decode(element.jsonObject["placeholder"]),
				regex = StringDecoder.decode(element.jsonObject["regex"]),
				errorMessage = UITooltipMessage.decode(element.jsonObject["errorMessage"]),
				keyboardType = UITextInputKeyboardType.decode(element.jsonObject["keyboardType"]),
				secure = BooleanDecoder.decode(element.jsonObject["secure"]),
				autocorrect = BooleanDecoder.decode(element.jsonObject["autocorrect"]),
				size = IntDecoder.decode(element.jsonObject["size"]),
				color = Color.decode(element.jsonObject["color"]),
				design = FontDesign.decode(element.jsonObject["design"]),
				weight = FontWeight.decode(element.jsonObject["weight"]),
				textAlign = TextAlign.decode(element.jsonObject["textAlign"]),
				frame = FrameData.decode(element.jsonObject["frame"]),
			)
		}
	}
}

internal enum class UITextInputKeyboardType {
	DEFAULT,
	ASCII,
	EMAIL,
	DECIMAL,
	NUMBER,
	URI,
	ALPHABET,
	UNKNOWN,;

	companion object {
		fun decode(element: JsonElement?): UITextInputKeyboardType? {
			if (element == null) {
				return null
			}
			if (element !is JsonPrimitive) {
				return null
			}
			if (element is JsonNull) {
				return null
			}
			if (!element.jsonPrimitive.isString) {
				return null
			}
			return when (element.jsonPrimitive.content) {
				"DEFAULT" -> DEFAULT
				"ASCII" -> ASCII
				"EMAIL" -> EMAIL
				"DECIMAL" -> DECIMAL
				"NUMBER" -> NUMBER
				"URI" -> URI
				"ALPHABET" -> ALPHABET
				else -> UNKNOWN
			}
		}
	}
}


internal class UITooltipMessage (
	val title: String? = null,
) {
	companion object {
		fun decode(element: JsonElement?): UITooltipMessage? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return UITooltipMessage(
				title = StringDecoder.decode(element.jsonObject["title"]),
			)
		}
	}
}

internal class VariantConfig (
	val key: String? = null,
	val kind: VariantConfigKind? = null,
	val value: String? = null,
) {
	companion object {
		fun decode(element: JsonElement?): VariantConfig? {
			if (element == null) {
				return null
			}
			if (element !is JsonObject) {
				return null
			}

			return VariantConfig(
				key = StringDecoder.decode(element.jsonObject["key"]),
				kind = VariantConfigKind.decode(element.jsonObject["kind"]),
				value = StringDecoder.decode(element.jsonObject["value"]),
			)
		}
	}
}

internal enum class VariantConfigKind {
	COMPONENT,
	STRING,
	NUMBER,
	BOOLEAN,
	JSON,
	UNKNOWN,;

	companion object {
		fun decode(element: JsonElement?): VariantConfigKind? {
			if (element == null) {
				return null
			}
			if (element !is JsonPrimitive) {
				return null
			}
			if (element is JsonNull) {
				return null
			}
			if (!element.jsonPrimitive.isString) {
				return null
			}
			return when (element.jsonPrimitive.content) {
				"COMPONENT" -> COMPONENT
				"STRING" -> STRING
				"NUMBER" -> NUMBER
				"BOOLEAN" -> BOOLEAN
				"JSON" -> JSON
				else -> UNKNOWN
			}
		}
	}
}


internal enum class Weekdays {
	SUNDAY,
	MONDAY,
	TUESDAY,
	WEDNESDAY,
	THURSDAY,
	FRIDAY,
	SATURDAY,
	UNKNOWN,;

	companion object {
		fun decode(element: JsonElement?): Weekdays? {
			if (element == null) {
				return null
			}
			if (element !is JsonPrimitive) {
				return null
			}
			if (element is JsonNull) {
				return null
			}
			if (!element.jsonPrimitive.isString) {
				return null
			}
			return when (element.jsonPrimitive.content) {
				"SUNDAY" -> SUNDAY
				"MONDAY" -> MONDAY
				"TUESDAY" -> TUESDAY
				"WEDNESDAY" -> WEDNESDAY
				"THURSDAY" -> THURSDAY
				"FRIDAY" -> FRIDAY
				"SATURDAY" -> SATURDAY
				else -> UNKNOWN
			}
		}
	}
}

